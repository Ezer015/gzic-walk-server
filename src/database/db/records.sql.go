// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: records.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRecord = `-- name: CreateRecord :one
INSERT INTO records(image_id, sight_id, sight_name, copywriting)
    VALUES ($1, $2, $3, $4)
RETURNING
    record_id
`

type CreateRecordParams struct {
	ImageID     int32       `json:"image_id"`
	SightID     pgtype.Int4 `json:"sight_id"`
	SightName   string      `json:"sight_name"`
	Copywriting string      `json:"copywriting"`
}

func (q *Queries) CreateRecord(ctx context.Context, arg CreateRecordParams) (int32, error) {
	row := q.db.QueryRow(ctx, createRecord,
		arg.ImageID,
		arg.SightID,
		arg.SightName,
		arg.Copywriting,
	)
	var record_id int32
	err := row.Scan(&record_id)
	return record_id, err
}

const getRandomRecord = `-- name: GetRandomRecord :one
SELECT
    record_id,
    image_id,
    sight_id,
    sight_name,
    copywriting
FROM
    records
WHERE
    record_id =(
        SELECT
            record_id
        FROM
            records OFFSET floor(random() *(
                SELECT
                    COUNT(*)
                FROM records))
        LIMIT 1)
`

type GetRandomRecordRow struct {
	RecordID    int32       `json:"record_id"`
	ImageID     int32       `json:"image_id"`
	SightID     pgtype.Int4 `json:"sight_id"`
	SightName   string      `json:"sight_name"`
	Copywriting string      `json:"copywriting"`
}

func (q *Queries) GetRandomRecord(ctx context.Context) (GetRandomRecordRow, error) {
	row := q.db.QueryRow(ctx, getRandomRecord)
	var i GetRandomRecordRow
	err := row.Scan(
		&i.RecordID,
		&i.ImageID,
		&i.SightID,
		&i.SightName,
		&i.Copywriting,
	)
	return i, err
}

const getRecord = `-- name: GetRecord :one
SELECT
    image_id,
    sight_id,
    sight_name,
    copywriting
FROM
    records
WHERE
    record_id = $1
`

type GetRecordRow struct {
	ImageID     int32       `json:"image_id"`
	SightID     pgtype.Int4 `json:"sight_id"`
	SightName   string      `json:"sight_name"`
	Copywriting string      `json:"copywriting"`
}

func (q *Queries) GetRecord(ctx context.Context, recordID int32) (GetRecordRow, error) {
	row := q.db.QueryRow(ctx, getRecord, recordID)
	var i GetRecordRow
	err := row.Scan(
		&i.ImageID,
		&i.SightID,
		&i.SightName,
		&i.Copywriting,
	)
	return i, err
}
